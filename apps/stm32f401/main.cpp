#include "../data/roboto_regular_16.hpp"
#include "adc.h"
#include "command_processor.hpp"
#include "gpio.h"
#include "hardware.hpp"
#include "i2c.h"
#include "spi.h"
#include "stm32f4xx_hal.h"
#include "terminal.hpp"
#include "tim.h"
#include "usart.h"
#include "w25qxx.h"

#include <zoal/data/ring_buffer.hpp>
#include <zoal/freertos/task.hpp>

using delay = zoal::utils::cmsis_os2::delay<84000000>;
using task_type = zoal::freertos::task<zoal::freertos::freertos_allocation_type::static_mem>;

[[noreturn]] void zoal_main_task(void *);

void test_ssh1106();
void write_flash();
__attribute__((unused)) zoal::mem::reserve_mem<task_type, 256, StackType_t> command_task(zoal_cmd_processor, "command");
__attribute__((unused)) zoal::mem::reserve_mem<task_type, 256, StackType_t> main_task(zoal_main_task, "main");

class funct {
public:
    static void print_cas(uint32_t addr, uint32_t c, uint32_t s) {
        using zoal::io::hexadecimal;
        tx_stream << "A: " << hexadecimal(addr) << " C: " << hexadecimal(c) << " S: " << hexadecimal(s) << "\r\n";
    }

    template<class T>
    void operator()() {
        using cas = typename T::type;
        print_cas(cas::address, cas::clear, cas::set);
    }
};

void print_i2c(I2C_TypeDef *i2c) {
    tx_stream << "CR1\t" << (void *)&i2c->CR1 << "\t" << zoal::io::hexadecimal(i2c->CR1) << "\r\n";
    tx_stream << "CR2\t" << (void *)&i2c->CR2 << "\t" << zoal::io::hexadecimal(i2c->CR2) << "\r\n";
    tx_stream << "OAR1\t" << (void *)&i2c->OAR1 << "\t" << zoal::io::hexadecimal(i2c->OAR1) << "\r\n";
    tx_stream << "OAR2\t" << (void *)&i2c->OAR2 << "\t" << zoal::io::hexadecimal(i2c->OAR2) << "\r\n";
    tx_stream << "CCR\t" << (void *)&i2c->CCR << "\t" << zoal::io::hexadecimal(i2c->CCR) << "\r\n";
    tx_stream << "TRISE\t" << (void *)&i2c->TRISE << "\t" << zoal::io::hexadecimal(i2c->TRISE) << "\r\n";
}

[[noreturn]] void zoal_main_task(void *) {
    init_terminal();

    terminal.sync();

#if 0
    using i2c_01_params = zoal::periph::i2c_fast_mode<42000000>;
    using i2c_mux = mcu::mux::i2c<mcu::i2c_01, mcu::pb_09, mcu::pb_08>;
    using i2c_cfg = mcu::cfg::i2c<mcu::i2c_01, i2c_01_params>;

    tx_stream << "\r\nConfig: \r\n";

    funct fn;
    zoal::ct::type_chain_iterator<i2c_cfg::apply>::for_each(fn);

    //    I2C_TypeDef *i2c = I2C1;
    tx_stream << "\r\nPrev I2C1: \r\n";
    print_i2c(&prev_i2c);
    tx_stream << "\r\nCurrent I2C1: \r\n";
    print_i2c(I2C1);

    tx_stream << "Mux: \r\n";
    zoal::ct::type_chain_iterator<i2c_mux::connect>::for_each(fn);
#endif

    W25qxx_Init();

    tx_stream << "w25qxx: " << (int)w25qxx.ID << "\r\n";

//    test_ssh1106();
//    write_flash();

    for (;;) {
        auto bits = hardware_events.wait(all_hardware_events);

        if ((bits & i2c_event) == i2c_event) {
            i2c_dispatcher.handle();
        }

        if ((bits & usart_event) == usart_event) {
            uint8_t rx_buffer[8];
            size_t size;
            do {
                size = rx_stream_buffer.receive(rx_buffer, sizeof(rx_buffer), 0);
                if (size != 0) {
                    terminal.push_and_scan(rx_buffer, size);
                }
            } while (size == sizeof(rx_buffer));
        }
    }
}

const uint8_t ecafe_logo [] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0x3f, 0x0f, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x70,
    0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0xc0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0x7f, 0x3f, 0x1f,
    0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x03, 0x83, 0x83, 0xc3, 0xe7, 0x7e, 0x3c, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf8,
    0xfe, 0xff, 0xff, 0x7f, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x80, 0x81, 0x81, 0xc3, 0xc3, 0xc7, 0xc7, 0xc7, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xee, 0xce, 0xce,
    0x8e, 0x8e, 0x8e, 0x0f, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0x7c, 0x3c, 0x1c, 0x1c, 0x18,
    0xb8, 0xf0, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0x78, 0x70, 0x60, 0xe0,
    0xf0, 0xf8, 0xf8, 0xf0, 0xe0, 0x00, 0x00, 0x10, 0x18, 0x18, 0x98, 0xf8, 0xfc, 0xff, 0xff, 0xff,
    0x1f, 0x1f, 0x19, 0x18, 0x18, 0x08, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0x7c, 0x3c, 0x38,
    0xf0, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf8, 0xfc, 0xfe, 0xfe, 0x7f, 0x1f, 0x0f,
    0x07, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0xe0, 0xfc, 0xfe, 0xff, 0x7f, 0x1f, 0x0f, 0x03, 0x01, 0x00, 0x0c, 0x0c, 0x0c, 0x06, 0x07,
    0x03, 0xe1, 0xf0, 0xfc, 0xfe, 0xff, 0x3f, 0x0f, 0x07, 0x83, 0xc1, 0x70, 0x38, 0xfc, 0xff, 0xff,
    0xff, 0x7f, 0x1f, 0x07, 0x01, 0x00, 0x80, 0xe0, 0xf8, 0xfe, 0xff, 0x3f, 0x0f, 0xff, 0xff, 0x3f,
    0x30, 0x60, 0xe0, 0xf0, 0xfc, 0xfe, 0xff, 0x7f, 0x6f, 0x67, 0x63, 0x31, 0x30, 0x18, 0x0c, 0x07,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x80, 0xc0, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x00, 0x00, 0x30, 0x78, 0xfc, 0x78, 0x30, 0x00,
    0x00, 0x07, 0x1f, 0x3f, 0x3f, 0x7c, 0x70, 0x60, 0x60, 0x60, 0x70, 0x30, 0x18, 0x0c, 0x0c, 0x06,
    0x0f, 0x1f, 0x3f, 0x3f, 0x3f, 0x3c, 0x1c, 0x0e, 0x07, 0x01, 0x00, 0x00, 0x1f, 0x3f, 0x7f, 0x7f,
    0x23, 0x30, 0x18, 0xcc, 0xf6, 0xff, 0xff, 0xff, 0x3f, 0x0f, 0x01, 0xe0, 0xfe, 0x7f, 0x03, 0x00,
    0x00, 0x00, 0x0f, 0x1f, 0x3f, 0x7f, 0x70, 0x70, 0x60, 0x60, 0x60, 0x30, 0x30, 0x18, 0x0c, 0x07,
    0x00, 0x00, 0xc0, 0xfc, 0xf8, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x07, 0x0f, 0x0f, 0x0f,
    0x1e, 0x1e, 0x1c, 0x1c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1c, 0x1c, 0x0c, 0x0e, 0x0e, 0x06, 0x07,
    0x03, 0x01, 0x81, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0x78, 0x3c, 0x3c, 0x3c,
    0x1c, 0x1e, 0x1e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x07, 0x06, 0x06, 0x06,
    0x06, 0xfe, 0xff, 0xff, 0xdf, 0x9f, 0x1b, 0x98, 0xf8, 0xf8, 0x7e, 0x3f, 0x33, 0x70, 0x70, 0x70,
    0x70, 0x70, 0x70, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0x78, 0x78, 0x7c, 0x3c,
    0x3e, 0x1f, 0x1f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x03, 0x07, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void write_flash() {
    tx_stream << "Erasing block... t: " << uwTick << "\r\n";
    w25q32::block_erase(0);
    tx_stream << "Block erased t: " << uwTick << "\r\n";

    tx_stream << "Logo size: " << sizeof(ecafe_logo) << "\r\n";
    tx_stream << "Writing logo... t: " << uwTick << "\r\n";
    w25q32::write(0, ecafe_logo, sizeof(ecafe_logo));
    tx_stream << "Logo written t: " << uwTick << "\r\n";
}

#include <zoal/gfx/glyph_renderer.hpp>
#include <zoal/gfx/renderer.hpp>
#include <zoal/ic/sh1106.hpp>

using adapter = zoal::ic::sh1106_adapter_0<128, 64>;
using graphics = zoal::gfx::renderer<uint8_t, adapter>;
using oled_type = zoal::ic::sh1106_spi<128, 64, oled_spi, oled_res, oled_ds, oled_cs, delay>;

oled_type screen;

class mem_reader {
public:
    template<class T>
    static T read_mem(const void *ptr) {
        T t;
        memcpy(&t, ptr, sizeof(t));
        return t;
    }
};

void test_ssh1106() {
    screen.init();

    auto g = graphics::from_memory(screen.buffer.canvas);
    zoal::gfx::glyph_renderer<graphics, mem_reader> gl(g, &roboto_regular_16);

//    w25q32::read(0, &screen.buffer.canvas, sizeof(screen.buffer.canvas));

    g->clear(0);
    g->draw_line(0, 0, 127, 0, 1);
    g->draw_line(0, 63, 127, 63, 1);
    g->draw_circle(5, 34, 5, 1);
    g->draw_circle(40, 34, 5, 1);

    gl.color(1);
    gl.position(0, roboto_regular_16.y_advance);
    gl.draw(L"Привіт!!!");

    screen.display();
}

extern "C" void SystemClock_Config(void);

int main() {
    HAL_Init();

    SystemClock_Config();

    MX_SPI1_Init();
    MX_SPI2_Init();
    zoal_init_hardware();

    vTaskStartScheduler();
    return 0;
}
