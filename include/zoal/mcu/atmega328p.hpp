/**
 * Autogenerated file. Do not modify manually.
 */
#ifndef ZOAL_MCU_ATMEGA328P_HPP
#define ZOAL_MCU_ATMEGA328P_HPP

#include <stdint.h>
#include <zoal/arch/avr/adc.hpp>
#include <zoal/arch/avr/atmega/cfg.hpp>
#include <zoal/arch/avr/atmega/irq.hpp>
#include <zoal/arch/avr/atmega/metadata.hpp>
#include <zoal/arch/avr/atmega/mux.hpp>
#include <zoal/arch/avr/atmega/usart.hpp>
#include <zoal/arch/avr/port.hpp>
#include <zoal/arch/avr/timer16.hpp>
#include <zoal/arch/avr/timer8.hpp>
#include <zoal/gpio/base_api.hpp>
#include <zoal/gpio/pin.hpp>
#include <zoal/gpio/port_link.hpp>
#include <zoal/mcu/base_mcu.hpp>

namespace zoal { namespace mcu {
    template<uint32_t Frequency>
    class atmega328p : public base_mcu<Frequency, 1> {
    public:
        template<uintptr_t Address, uint8_t PinMask>
        using port = typename ::zoal::arch::avr::port<Address, PinMask>;

        using port_b = port<0x0023, 0xff>;
        using port_c = port<0x0026, 0x7f>;
        using port_d = port<0x0029, 0xff>;

        using timer_00 = ::zoal::arch::avr::atmega::timer8<0x0044, 0, false>;
        using timer_01 = ::zoal::arch::avr::atmega::timer16<0x0080, 1>;
        using timer_02 = ::zoal::arch::avr::atmega::timer8<0x00b0, 2, true>;

        template<class Buffer>
        using usart_00 = typename ::zoal::arch::avr::usart<0x00c0, 0, Buffer>;

        using adc_00 = ::zoal::arch::avr::adc<::zoal::arch::avr::mcu_type::atmega, 0x0078, 0>;

        template<class Port, uint8_t Offset>
        using pin = typename ::zoal::gpio::pin<Port, Offset>;

        using pb_00 = pin<port_b, 0x0>;
        using pb_01 = pin<port_b, 0x1>;
        using pb_02 = pin<port_b, 0x2>;
        using pb_03 = pin<port_b, 0x3>;
        using pb_04 = pin<port_b, 0x4>;
        using pb_05 = pin<port_b, 0x5>;
        using pb_06 = pin<port_b, 0x6>;
        using pb_07 = pin<port_b, 0x7>;

        using pc_00 = pin<port_c, 0x0>;
        using pc_01 = pin<port_c, 0x1>;
        using pc_02 = pin<port_c, 0x2>;
        using pc_03 = pin<port_c, 0x3>;
        using pc_04 = pin<port_c, 0x4>;
        using pc_05 = pin<port_c, 0x5>;
        using pc_06 = pin<port_c, 0x6>;

        using pd_00 = pin<port_d, 0x0>;
        using pd_01 = pin<port_d, 0x1>;
        using pd_02 = pin<port_d, 0x2>;
        using pd_03 = pin<port_d, 0x3>;
        using pd_04 = pin<port_d, 0x4>;
        using pd_05 = pin<port_d, 0x5>;
        using pd_06 = pin<port_d, 0x6>;
        using pd_07 = pin<port_d, 0x7>;

        using port_chain = typename ::zoal::gpio::chain_builder<port_b, port_c, port_d>::chain;
        using api = ::zoal::gpio::base_api<port_chain>;
        using mux = ::zoal::arch::avr::atmega::mux<api>;
        using cfg = ::zoal::arch::avr::atmega::cfg<api, Frequency>;
        using irq = ::zoal::arch::avr::atmega::irq;
    };
}}

namespace zoal { namespace metadata {
    using zoal::utils::integral_constant;

    template<>
    struct pin_to_pwm_channel<0x0044, 0x0029, 5, 1> : integral_constant<bool, true> {};

    template<>
    struct pin_to_pwm_channel<0x0044, 0x0029, 6, 0> : integral_constant<bool, true> {};

    template<>
    struct pin_to_pwm_channel<0x0080, 0x0023, 1, 0> : integral_constant<bool, true> {};

    template<>
    struct pin_to_pwm_channel<0x0080, 0x0023, 2, 1> : integral_constant<bool, true> {};

    template<>
    struct pin_to_pwm_channel<0x00b0, 0x0023, 3, 0> : integral_constant<bool, true> {};

    template<>
    struct pin_to_pwm_channel<0x00b0, 0x0029, 3, 1> : integral_constant<bool, true> {};

    template<>
    struct usart_mapping<0x00c0, 0x0000, 0> : base_usart_mapping<0, 0, 0> {};

    template<>
    struct usart_mapping<0x00c0, 0x0029, 1> : base_usart_mapping<-1, 0, -1> {};

    template<>
    struct usart_mapping<0x00c0, 0x0029, 0> : base_usart_mapping<0, -1, -1> {};

    template<>
    struct usart_mapping<0x00c0, 0x0029, 4> : base_usart_mapping<-1, -1, 0> {};

    template<>
    struct pin_to_adc_channel<0x0078, 0x0026, 0> : integral_constant<int, 0> {};

    template<>
    struct pin_to_adc_channel<0x0078, 0x0026, 1> : integral_constant<int, 1> {};

    template<>
    struct pin_to_adc_channel<0x0078, 0x0026, 2> : integral_constant<int, 2> {};

    template<>
    struct pin_to_adc_channel<0x0078, 0x0026, 3> : integral_constant<int, 3> {};

    template<>
    struct pin_to_adc_channel<0x0078, 0x0026, 4> : integral_constant<int, 4> {};

    template<>
    struct pin_to_adc_channel<0x0078, 0x0026, 5> : integral_constant<int, 5> {};

}}

#endif
