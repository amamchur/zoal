#ifndef ZOAL_DATA_SEGMENT7_HPP
#define ZOAL_DATA_SEGMENT7_HPP

#include <stdint.h>

namespace zoal { namespace data {
	class segment7 {
	protected:
		uint8_t value;
	public:
		explicit segment7(uint8_t value) : value(value) {
		}

		/*******************
		 *  Segment Map
		 *     0x01
		 *   ___V____
		 *  |        |
		 *  |<0x20   |
		 *  |        |<0x02
		 *  |  0x40  |
		 *  |___V____|
		 *  |        |
		 *  |<0x10   |
		 *  |        |<0x04
		 *  |  0x08  |
		 *  |___V____|o<0x80
		 *
		 ******************/
		static segment7 abcd_ascii(char ascii) {
			uint8_t v = 0x01 | 0x08 | 0x40;
			switch(ascii) {
				case '0': v = 0x01 | 0x02 | 0x04 | 0x08 | 0x10 | 0x20; break;
				case '1': v = 0x02 | 0x04; break;
				case '2': v = 0x01 | 0x02 | 0x08 | 0x10 | 0x40; break;
				case '3': v = 0x01 | 0x02 | 0x04 | 0x08 | 0x40; break;
				case '4': v = 0x02 | 0x04 | 0x20 | 0x40; break;
				case '5': v = 0x01 | 0x04 | 0x08 | 0x20 | 0x40; break;
				case '6': v = 0x01 | 0x04 | 0x08 | 0x10 | 0x20 | 0x40; break;
				case '7': v = 0x01 | 0x02 | 0x04; break;
				case '8': v = 0x01 | 0x02 | 0x04 | 0x08 | 0x10 | 0x20 | 0x40; break;
				case '9': v = 0x01 | 0x02 | 0x04 | 0x08 | 0x20 | 0x40; break;
				case 'A': v = 0x01 | 0x02 | 0x04 | 0x10 | 0x20 | 0x40; break;
				case 'B': v = 0x04 | 0x08 | 0x10 | 0x20 | 0x40; break;
				case 'C': v = 0x01 | 0x08 | 0x10 | 0x20; break;
				case 'D': v = 0x02 | 0x04 | 0x08 | 0x10 | 0x40; break;
				case 'E': v = 0x01 | 0x08 | 0x10 | 0x20 | 0x40; break;
				case 'F': v = 0x01 | 0x10 | 0x20 | 0x40; break;
				case '-': v = 0x40; break;
				case ' ': v = 0; break;
                default: break;
			}
			return segment7(v);
		}

		static segment7 abcd_hex(char value) {
			uint8_t v = 0x01 | 0x08 | 0x40;
			switch(value) {
				case 0x0: v = 0x01 | 0x02 | 0x04 | 0x08 | 0x10 | 0x20; break;
				case 0x1: v = 0x02 | 0x04; break;
				case 0x2: v = 0x01 | 0x02 | 0x08 | 0x10 | 0x40; break;
				case 0x3: v = 0x01 | 0x02 | 0x04 | 0x08 | 0x40; break;
				case 0x4: v = 0x02 | 0x04 | 0x20 | 0x40; break;
				case 0x5: v = 0x01 | 0x04 | 0x08 | 0x20 | 0x40; break;
				case 0x6: v = 0x01 | 0x04 | 0x08 | 0x10 | 0x20 | 0x40; break;
				case 0x7: v = 0x01 | 0x02 | 0x04; break;
				case 0x8: v = 0x01 | 0x02 | 0x04 | 0x08 | 0x10 | 0x20 | 0x40; break;
				case 0x9: v = 0x01 | 0x02 | 0x04 | 0x08 | 0x20 | 0x40; break;
				case 0xA: v = 0x01 | 0x02 | 0x04 | 0x10 | 0x20 | 0x40; break;
				case 0xB: v = 0x04 | 0x08 | 0x10 | 0x20 | 0x40; break;
				case 0xC: v = 0x01 | 0x08 | 0x10 | 0x20; break;
				case 0xD: v = 0x02 | 0x04 | 0x08 | 0x10 | 0x40; break;
				case 0xE: v = 0x01 | 0x08 | 0x10 | 0x20 | 0x40; break;
				case 0xF: v = 0x01 | 0x10 | 0x20 | 0x40; break;
                default: break;
			}
			return segment7(v);
		}

		/*******************
		 *  Segment Map
		 *     0x40
		 *   ___V____
		 *  |        |
		 *  |<0x02   |
		 *  |        |<0x20
		 *  |  0x01  |
		 *  |___V____|
		 *  |        |
		 *  |<0x04   |
		 *  |        |<0x10
		 *  |  0x08  |
		 *  |___V____|o<0x80
		 *
		 ******************/
		static segment7 gfed_ascii(char ascii) {
			uint8_t v = 0x01 | 0x08 | 0x40;
			switch(ascii) {
				case '0': v = 0x40 | 0x20 | 0x10 | 0x08 | 0x04 | 0x02; break;
				case '1': v = 0x20 | 0x10; break;
				case '2': v = 0x40 | 0x20 | 0x08 | 0x04 | 0x01; break;
				case '3': v = 0x40 | 0x20 | 0x10 | 0x08 | 0x01; break;
				case '4': v = 0x20 | 0x10 | 0x02 | 0x01; break;
				case '5': v = 0x40 | 0x10 | 0x08 | 0x02 | 0x01; break;
				case '6': v = 0x40 | 0x10 | 0x08 | 0x04 | 0x02 | 0x01; break;
				case '7': v = 0x40 | 0x20 | 0x10; break;
				case '8': v = 0x40 | 0x20 | 0x10 | 0x08 | 0x04 | 0x02 | 0x01; break;
				case '9': v = 0x40 | 0x20 | 0x10 | 0x08 | 0x02 | 0x01; break;
				case 'A': v = 0x40 | 0x20 | 0x10 | 0x04 | 0x02 | 0x01; break;
				case 'B': v = 0x10 | 0x08 | 0x04 | 0x02 | 0x01; break;
				case 'C': v = 0x40 | 0x08 | 0x04 | 0x02; break;
				case 'D': v = 0x20 | 0x10 | 0x08 | 0x04 | 0x01; break;
				case 'E': v = 0x40 | 0x08 | 0x04 | 0x02 | 0x01; break;
				case 'F': v = 0x40 | 0x04 | 0x02 | 0x01; break;
				case '-': v = 0x01; break;
				case ' ': v = 0; break;
                default: break;
			}
			return segment7(v);
		}

		static segment7 gfed_hex(char value) {
			uint8_t v = 0x01 | 0x08 | 0x40;
			switch(value) {
				case 0x0: v = 0x40 | 0x20 | 0x10 | 0x08 | 0x04 | 0x02; break;
				case 0x1: v = 0x20 | 0x10; break;
				case 0x2: v = 0x40 | 0x20 | 0x08 | 0x04 | 0x01; break;
				case 0x3: v = 0x40 | 0x20 | 0x10 | 0x08 | 0x01; break;
				case 0x4: v = 0x20 | 0x10 | 0x02 | 0x01; break;
				case 0x5: v = 0x40 | 0x10 | 0x08 | 0x02 | 0x01; break;
				case 0x6: v = 0x40 | 0x10 | 0x08 | 0x04 | 0x02 | 0x01; break;
				case 0x7: v = 0x40 | 0x20 | 0x10; break;
				case 0x8: v = 0x40 | 0x20 | 0x10 | 0x08 | 0x04 | 0x02 | 0x01; break;
				case 0x9: v = 0x40 | 0x20 | 0x10 | 0x08 | 0x02 | 0x01; break;
				case 0xA: v = 0x40 | 0x20 | 0x10 | 0x04 | 0x02 | 0x01; break;
				case 0xB: v = 0x10 | 0x08 | 0x04 | 0x02 | 0x01; break;
				case 0xC: v = 0x40 | 0x08 | 0x04 | 0x02; break;
				case 0xD: v = 0x20 | 0x10 | 0x08 | 0x04 | 0x01; break;
				case 0xE: v = 0x40 | 0x08 | 0x04 | 0x02 | 0x01; break;
				case 0xF: v = 0x40 | 0x04 | 0x02 | 0x01; break;
                default: break;
			}
			return segment7(v);
		}

		inline segment7& dot(bool on = true) {
			if (on) {
				value |= 0x80;
			} else {
				value &= ~0x80;
			}
			return *this;
		}

		inline operator uint8_t() const {
			return value;
		}
	};
}}

#endif
